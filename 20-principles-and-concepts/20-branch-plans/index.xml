<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Branch Plans on Concepts &amp; Applied Examples</title>
    <link>https://cdaf.io/20-principles-and-concepts/20-branch-plans/</link>
    <description>Recent content in Branch Plans on Concepts &amp; Applied Examples</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://cdaf.io/20-principles-and-concepts/20-branch-plans/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Continuous Delivery</title>
      <link>https://cdaf.io/20-principles-and-concepts/20-branch-plans/10-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/20-principles-and-concepts/20-branch-plans/10-cd/</guid>
      <description>Continuous Delivery (CD) decouples the release activity from development activity. Unlike Continuous Deployment, Continuous Delivery has one or more approval gates. At time of writing, the majority of pipeline tools support approval gates, with the exception of the GitHub Free tier.
The Continuous Delivery Maturity Model A fundamental aspect of Continuous Delivery is to build once and deploy many times. This means the output of the development process (Continuous Integration) is an artefact which can be re-used to deploy to multiple environments.</description>
    </item>
    
    <item>
      <title>Branch Deploy</title>
      <link>https://cdaf.io/20-principles-and-concepts/20-branch-plans/20-branch-deploy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/20-principles-and-concepts/20-branch-plans/20-branch-deploy/</guid>
      <description>Where the pipeline tool does not support approval gating, but a review and approval mechanism is desired, the &amp;ldquo;Pull Request&amp;rdquo;/&amp;ldquo;Merge Request&amp;rdquo; can be used. The resulting approval will rebuild the solution and deliver it to the defined environment.
Branch Based Deployment There are a variety of methods used within a branch based deployment approach, the following is a common example.
A long-living branch is defined for each target environment, in this example dev, test and release.</description>
    </item>
    
    <item>
      <title>GitOps</title>
      <link>https://cdaf.io/20-principles-and-concepts/20-branch-plans/30-gitops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/20-principles-and-concepts/20-branch-plans/30-gitops/</guid>
      <description>GitOps is another branch based deployment approach, however it typically does not have a Continuous Integration construct, and instead deploys directly from source control.
Branch Based Deployment Directly from Source Control GitOps is commonly portrayed as Trunk Based
Each target environment maybe defined as a directory, but in many some cases, i.e. to provide a gating mechanism, like Branch Based Deployment, multiple long-lived branches are used.</description>
    </item>
    
  </channel>
</rss>
