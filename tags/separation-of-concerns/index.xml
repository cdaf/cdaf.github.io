<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>separation-of-concerns on Concepts &amp; Applied Examples</title>
    <link>https://cdaf.io/tags/separation-of-concerns/</link>
    <description>Recent content in separation-of-concerns on Concepts &amp; Applied Examples</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://cdaf.io/tags/separation-of-concerns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tokenisation</title>
      <link>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/10-tokenisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/10-tokenisation/</guid>
      <description>Abstraction of Application Settings In this example, the ASP.NET solution creates a Web Deploy package. A common approach for this is to create a build for each environment with the settings transformed into environment specific .config files.
In the CDAF approach, a single, tokenised, configuration file, i.e. Web.Release.config is produced. The principle of a single way of working encourages the abstraction of application settings from the internal representation.
Note: The Release build is used in this example, to avoid breaking the development experience which typically uses the Debug configuration.</description>
    </item>
    
    <item>
      <title>Tokenisation</title>
      <link>https://cdaf.io/30-imperative-deployment/40-static-content/10-tokenisation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/40-static-content/10-tokenisation/</guid>
      <description>Abstraction of Application Settings As the application is static content, runtime variables are not applicable, however, variations in the application configuration at deploy time can, on occasions, be applicable, e.g. using a different Google Tag Manager (GTM) for production and non-production environments to ensure the analytics are not contaminated.
Within source control there are two tokens applied. The first is a build-time token, which captures the semantic version. This is constructed from a release prefix and build number.</description>
    </item>
    
    <item>
      <title>Continuous Integration (CI)</title>
      <link>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/20-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/20-ci/</guid>
      <description>Build &amp;amp; Package Once The primary driver file for CDAF is the CDAF.solution file. The directory containing this file is the SOLUTIONROOT. The mandatory properties are solutionName and artifactPrefix.
solutionName=MyAspApp artifactPrefix=0.1 Build Process The CDAF Execution Engine is used to reduce the cognitive load, allowing the engineer to focus on the primary objective, and not have to cater for logging, exception and error handling. The build.tsk file is placed in the project sub-directory.</description>
    </item>
    
    <item>
      <title>Continuous Integration (CI)</title>
      <link>https://cdaf.io/30-imperative-deployment/30-java-maven/20-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/30-java-maven/20-ci/</guid>
      <description>Build &amp;amp; Package Once To provide a runtime verification of the build that has been deployed, the version is automatically incremented by placing a variable in the pom.xml file
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; .. &amp;lt;artifactId&amp;gt;springboot&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;io.cdaf&amp;lt;/groupId&amp;gt; &amp;lt;name&amp;gt;Spring Boot Data REST Sample&amp;lt;/name&amp;gt; &amp;lt;description&amp;gt;Spring Boot Data REST Sample&amp;lt;/description&amp;gt; &amp;lt;version&amp;gt;0.2.${build.number}&amp;lt;/version&amp;gt; In the build task, the build number is supplied as a maven parameter
mvn --batch-mode --file springboot/pom.xml package -D&amp;#34;build.number=${BUILDNUMBER}&amp;#34; The resulting artefact is in a subdirectory, buy using the -flat parameter in storeForLocal the artefact will be placed in the root of release package.</description>
    </item>
    
    <item>
      <title>Continuous Integration (CI)</title>
      <link>https://cdaf.io/30-imperative-deployment/40-static-content/20-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/40-static-content/20-ci/</guid>
      <description>Build &amp;amp; Package Once The primary driver file for CDAF is the CDAF.solution file. The directory containing this file is the SOLUTIONROOT. The mandatory properties are solutionName and artifactPrefix.
solutionName=classbwizard productName=React Class B Recreational Vehicle Comparison Tool artifactPrefix=0.5 Build Process The CDAF Execution Engine is used to reduce the cognitive load, allowing the engineer to focus on the primary objective, and not have to cater for logging, exception and error handling.</description>
    </item>
    
    <item>
      <title>Continuous Delivery (CD)</title>
      <link>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/30-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/20-asp-net-web-deploy/30-cd/</guid>
      <description>Deploy Many The tokenised configuration files need to be detokenised at deploy time. The settings are likely to include both sensitive and non-sensitive values. A core principle of CDAF for sensitive values is based on the 12-Factor approach of using environment variables, while source control is the recommended approach for non-sensitive values.
Why Source Control for Settings? The Continuous Delivery Automation Framework (CDAF) has been engineered for enterprise scale implementations. Large scale organisations typically have a higher focus on gating and auditing, and to provide a change of configuration audit trail, along with a single way-of-working, the configuration changes are applied using the same principles as other deliveries, e.</description>
    </item>
    
    <item>
      <title>Continuous Delivery (CD)</title>
      <link>https://cdaf.io/30-imperative-deployment/30-java-maven/30-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/30-java-maven/30-cd/</guid>
      <description>Deploy Many While this example does not delivery the software component imperatively, i.e. it is release declaratively via the Release Train, a Continuous Delivery stage is still performed, however this is a closed loop process, where docker-compose is used to stand-up a container instance from the image, stand-up another container to perform a smoke test, and then tear down the stack.
services: target: image: &amp;#34;${TARGET_TAG}&amp;#34; test: image: &amp;#34;${TEST_TAG}&amp;#34; links: - target:target depends_on: - target </description>
    </item>
    
    <item>
      <title>Continuous Delivery (CD)</title>
      <link>https://cdaf.io/30-imperative-deployment/40-static-content/30-cd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cdaf.io/30-imperative-deployment/40-static-content/30-cd/</guid>
      <description>Deploy Many The continuous delivery has multiple phases, first is a closed-loop test, then are the runtime environments, which are promoted, starting with acceptance test.
Closed-Loop Test This first delivery stage used docker-compose to stand-up, test and tear-down an environment. This environment is transient and not accessible by manual testers.
services: classb: image: &amp;#34;${CLASSB_TAG}&amp;#34; ports: - &amp;#34;8000:8000&amp;#34; test: image: &amp;#34;${TEST_TAG}&amp;#34; volumes: - ${WORK_SPACE}:/solution/workspace links: - classb:classb depends_on: - classb Release Promotion After the closed-loop tests have passed, then the deployment to user acceptance test is performed.</description>
    </item>
    
  </channel>
</rss>
